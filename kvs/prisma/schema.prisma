// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Area {
  id                  String @id @default(uuid())
  name                String
  description         String?
  createdAt           DateTime @default(now())
  deletedAt           DateTime? // Soft delete: null = not deleted, date = deleted
  programs            Program[] // Relation: one Area has many Programs
  @@index([deletedAt])
}

model Program { 
  id            String      @id @default(uuid())
  name          String
  description   String?     // optional
  teachingUnits Int?        // optional
  price         Decimal?    @db.Decimal(10, 2) 
  createdAt     DateTime    @default(now())
  deletedAt     DateTime?   // Soft delete: null = not deleted, date = deleted
  areaId        String
  area          Area        @relation(fields: [areaId], references: [id])
  course        Course[]
  @@index([deletedAt])
}

model Course { 
  id            String    @id @default(uuid())
  programId     String
  program       Program   @relation(fields: [programId], references: [id])
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?
  mainTrainerId String
  mainTrainer   Trainer   @relation("MainTrainer", fields: [mainTrainerId], references: [id])
  trainers      Trainer[] @relation("CourseTrainers")
  registrations CourseRegistration[]
  @@index([deletedAt])
}

model CourseRegistration {
  id                  String      @id @default(uuid())
  courseId            String
  course              Course      @relation(fields: [courseId], references: [id])
  participantId       String
  participant         Participant @relation(fields: [participantId], references: [id])
  createdAt           DateTime    @default(now())
  deletedAt           DateTime?
  invoices            Invoice[]
  generatedDocuments  Document[]  

  // Status timestamps (boolean flags removed)
  infoSessionAt       DateTime?   // When info session was attended
  registeredAt        DateTime?   // When registered
  unregisteredAt      DateTime?   // When unregistered
  interestedAt        DateTime?   // When shown interest

  generalRemark       String?

  // Subsidy and discount fields (amounts are nullable)
  subsidyRemark       String?
  subsidyAmount       Decimal?    @db.Decimal(10, 2)
  discountRemark      String?
  discountAmount      Decimal?    @db.Decimal(10, 2)

  @@index([deletedAt])
  @@index([courseId])
  @@index([participantId])
}

model Trainer {
  id          String     @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  createdAt   DateTime   @default(now())
  deletedAt   DateTime?
  mainCourses Course[]   @relation("MainTrainer")
  courses     Course[]   @relation("CourseTrainers")
  @@index([deletedAt])
}

model Participant {
  id                    String      @id @default(uuid())
  name                  String
  surname               String
  salutation            String      // Anrede
  title                 String?
  email                 String
  phoneNumber           String
  birthday              DateTime
  postalCode            String        
  city                  String
  street                String
  country               String
  createdAt             DateTime    @default(now())
  deletedAt             DateTime?
  registrations         CourseRegistration[]
  invoiceRecipients     InvoiceRecipient[]   
  @@index([deletedAt])
}

model Invoice {
  id                    String               @id @default(uuid())
  amount                Float
  courseRegistrationId  String
  courseRegistration    CourseRegistration   @relation(fields: [courseRegistrationId], references: [id])
  isCancelled           Boolean              @default(false)
  dueDate               DateTime
  transactionNumber     String               @unique
  recipientId           String
  recipient             InvoiceRecipient     @relation(fields: [recipientId], references: [id])
}

model InvoiceRecipient {
  id            String       @id @default(uuid())
  type          RecipientType
  name          String
  email         String?
  address       String?
  createdAt     DateTime @default(now())
  deletedAt     DateTime?
  participantId String?      // <-- Only set if PERSON
  participant   Participant? @relation(fields: [participantId], references: [id])
  invoices      Invoice[]
  @@index([deletedAt])
}

enum RecipientType {
  PERSON
  COMPANY
}

model Document {
  id                    String               @id @default(uuid())
  role                  String
  file                  String               // URL to the file
  courseRegistrationId  String
  courseRegistration    CourseRegistration   @relation(fields: [courseRegistrationId], references: [id])
  createdAt        DateTime  @default(now())
  deletedAt        DateTime? // Soft delete: null = not deleted, date = deleted 
}

model Room {
  id              String   @id @default(uuid())
  name            String
  capacity        Int?
  location        String? 
  createdAt       DateTime @default(now())
  deletedAt       DateTime? // Soft delete: null = not deleted, date = deleted 
  reservations    RoomReservation[]
  @@index([deletedAt])
}

model RoomReservation {
  id               String    @id @default(uuid())
  name             String 
  startTime        DateTime  //Kombination aus Datum + Uhrzeit
  duration         Int       // Dauer in Minuten
  endTime          DateTime 
  roomId           String    // FK-Spalte fÃ¼r die Relation zu Room
  room             Room      @relation(fields: [roomId], references: [id])
  createdAt        DateTime  @default(now())
  deletedAt        DateTime? // Soft delete: null = not deleted, date = deleted 
  @@index([deletedAt])
}


